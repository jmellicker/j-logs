"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deepmerge_1 = __importDefault(require("deepmerge"));
const is_plain_object_1 = __importDefault(require("is-plain-object"));
const lowercase_keys_1 = require("./util/lowercase-keys");
function merge(defaults, route, options) {
    if (typeof route === "string") {
        let [method, url] = route.split(" ");
        options = Object.assign(url ? { method, url } : { url: method }, options);
    }
    else {
        options = route || {};
    }
    // lowercase header names before merging with defaults to avoid duplicates
    options.headers = lowercase_keys_1.lowercaseKeys(options.headers);
    const mergedOptions = deepmerge_1.default.all([defaults, options].filter(Boolean), {
        isMergeableObject: is_plain_object_1.default
    });
    // mediaType.previews arrays are merged, instead of overwritten
    if (defaults && defaults.mediaType.previews.length) {
        mergedOptions.mediaType.previews = defaults.mediaType.previews
            .filter(preview => !mergedOptions.mediaType.previews.includes(preview))
            .concat(mergedOptions.mediaType.previews);
    }
    mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map((preview) => preview.replace(/-preview/, ""));
    return mergedOptions;
}
exports.merge = merge;
